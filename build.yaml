# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'
jobs:
- job: BuildAngular
  steps:
  - task: Npm@1
    inputs:
      command: 'install'
      workingDir: '$(System.DefaultWorkingDirectory)'

  - task: Npm@1
    inputs:
      command: 'install'
      workingDir: '$(System.DefaultWorkingDirectory)'

  - task: Npm@1
    inputs:
      command: 'custom'
      workingDir: '$(System.DefaultWorkingDirectory)'
      customCommand: 'run build:production'

  - task: Npm@1
    inputs:
      command: 'custom'
      workingDir: '$(System.DefaultWorkingDirectory)'
      customCommand: 'prune --production'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'

- job: BuildFunctionApp
  steps:
  - task: Npm@1
    inputs:
      command: 'install'
      workingDir: '$(System.DefaultWorkingDirectory)'

  - task: Npm@1
    inputs:
      command: 'install'
      workingDir: '$(System.DefaultWorkingDirectory)/functions'

  - task: Npm@1
    inputs:
      command: 'custom'
      workingDir: '$(System.DefaultWorkingDirectory)/functions'

  - task: Npm@1
    inputs:
      command: 'custom'
      workingDir: '$(System.DefaultWorkingDirectory)/functions'
      customCommand: 'run build'


  - task: Npm@1
    inputs:
      command: 'custom'
      workingDir: '$(System.DefaultWorkingDirectory)/function'
      customCommand: 'prune --production'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/functions'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
